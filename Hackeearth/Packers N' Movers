# from sys import stdin
# def rl():
#     return [int(w) for w in stdin.readline().split()]
from collections import defaultdict
from math import sqrt,factorial,gcd,log2,inf,ceil
# map(int,input().split())
# l = list(map(int,input().split()))

import sys

sys.setrecursionlimit(10**9)

#
# def cal(n,k):
#     z = factorial(n)//(factorial(n-k) * factorial(k))
#
#     return z
#
#
# n = int(input())
#
# l = list(map(int,input().split()))
# k = int(input())
# pref = [1]
#
# for i in l:
#     pref.append(pref[-1]*i)
# ans = 0
# for i in range(1,n):
#     for j in range(i,n):
#
#          if i == j:
#
#              # j+=1
#              za = pref[j]
#              za1 = pref[n]//pref[j]
#
#              z = n-i-1
#              c = k-1
#
#              if z>=c and z>=0 and c>=0:
#                  yo = cal(z,c)
#                  # print(za,i)
#                  ans+=za*yo
#              z = i-1
#              c = k-1
#              if z>=c and z>=0 and c>=0:
#                  yo = cal(z,c)
#                  # print(za1,i)
#                  ans+=za1*yo
#          else:
#              z = n-3
#              c = k-2
#              # j+=1
#              za = pref[j]//pref[i]
#              if z>=c and z>=0 and c>=0:
#                 yo = cal(z,c)
#                 # print(yo,i,za)
#                 ans+=za*yo
#
#
# print(ans%720720)
#
#

k = int(input())

n = int(input())

l = list(map(int,input().split()))

ans = inf

dp = [[0 for i in range(n+1)] for j in range(k+1)]

pref= [0]

for i in l:
    pref.append(pref[-1]+i)

for i in range(1,n+1):
    dp[1][i] = pref[i]

for i in range(1,k+1):
    dp[i][1] = l[0]

for i in range(2,k+1):
    for j in range(2,n+1):



        best = inf
        for p in range(1,j+1):
            best = min(best,max(dp[i-1][p],pref[j]-pref[p]))

        dp[i][j] = best
        ans = min(best,ans)

print(dp[k][n])
